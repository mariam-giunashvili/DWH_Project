 -- This script creates the BL_3NF schema and its tables, sequences, and default records.  
-- It supports an optional schema drop before creating objects.  
-- The procedure BL_3NF_DDL_LOAD takes a BOOLEAN parameter with_drop.  
-- If with_drop is TRUE, the existing BL_3NF schema is dropped and recreated.  
-- The script creates required tables and sequences inside the schema.  
-- Constraints and primary keys are set to ensure data integrity.  
-- Usage example: CALL BL_3NF_DDL_LOAD(TRUE) to drop and recreate schema.  
-- Usage example: CALL BL_3NF_DDL_LOAD(FALSE) to create objects without dropping.  




-- Create or replace the procedure for BL_3NF DDL
CREATE OR REPLACE PROCEDURE BL_3NF_DDL_LOAD(IN with_drop BOOLEAN)
LANGUAGE plpgsql
AS
$$
BEGIN
    -- drop the schema and recreate it
    IF with_drop IS TRUE THEN
        DROP SCHEMA IF EXISTS BL_3NF CASCADE;
        CREATE SCHEMA BL_3NF;
    END IF;

    -- Set search path
    SET SEARCH_PATH TO BL_3NF;
    



-- CE_COUNTRIES Entity
CREATE SEQUENCE IF NOT EXISTS BL_3NF.SEQ_CE_COUNTRIES;

CREATE TABLE IF NOT EXISTS BL_3NF.CE_COUNTRIES (
    COUNTRY_ID INT NOT NULL,
    COUNTRIES_SRC_ID VARCHAR(50) NOT NULL,
    COUNTRY VARCHAR(50) NOT NULL,
    SOURCE_SYSTEM VARCHAR(50) NOT NULL,
    SOURCE_ENTITY VARCHAR(50) NOT NULL,
    INSERT_DT TIMESTAMP NOT NULL,
    UPDATE_DT TIMESTAMP NOT NULL,
    PRIMARY KEY (COUNTRY_ID)
);

ALTER SEQUENCE BL_3NF.SEQ_CE_COUNTRIES OWNED BY BL_3NF.CE_COUNTRIES.COUNTRY_ID;

-- Add default row
INSERT INTO BL_3NF.CE_COUNTRIES (
    COUNTRY_ID, COUNTRIES_SRC_ID, COUNTRY, SOURCE_SYSTEM, SOURCE_ENTITY, INSERT_DT, UPDATE_DT
) 
SELECT -1, 'n.a.', 'n.a.', 'MANUAL', 'MANUAL', '1900-01-01'::DATE, '1900-01-01'::DATE
WHERE NOT EXISTS (SELECT 1 FROM BL_3NF.CE_COUNTRIES WHERE COUNTRY_ID = -1);


-- CE_CITIES Entity
CREATE SEQUENCE IF NOT EXISTS BL_3NF.SEQ_CE_CITIES;

CREATE TABLE IF NOT EXISTS BL_3NF.CE_CITIES (
    CITY_ID INT NOT NULL,
    CITIES_SRC_ID VARCHAR(50) NOT NULL,
    CITY VARCHAR(50) NOT NULL,
    COUNTRY_ID INT NOT NULL,
    SOURCE_SYSTEM VARCHAR(50) NOT NULL,
    SOURCE_ENTITY VARCHAR(50) NOT NULL,
    INSERT_DT TIMESTAMP NOT NULL,
    UPDATE_DT TIMESTAMP NOT NULL,
    PRIMARY KEY (CITY_ID),
    FOREIGN KEY (COUNTRY_ID) REFERENCES BL_3NF.CE_COUNTRIES(COUNTRY_ID)
);

ALTER SEQUENCE BL_3NF.SEQ_CE_CITIES OWNED BY BL_3NF.CE_CITIES.CITY_ID;

-- Add default row
INSERT INTO BL_3NF.CE_CITIES (
    CITY_ID, CITIES_SRC_ID, CITY, COUNTRY_ID, SOURCE_SYSTEM, SOURCE_ENTITY, INSERT_DT, UPDATE_DT
) 
SELECT -1, 'n.a.', 'n.a.', -1, 'MANUAL', 'MANUAL', '1900-01-01'::DATE, '1900-01-01'::DATE
WHERE NOT EXISTS (SELECT 1 FROM BL_3NF.CE_CITIES WHERE CITY_ID = -1);




-- CE_ADDRESSES Entity
CREATE SEQUENCE IF NOT EXISTS BL_3NF.SEQ_CE_ADDRESSES;

CREATE TABLE IF NOT EXISTS BL_3NF.CE_ADDRESSES (
    ADDRESS_ID INT NOT NULL,
    ADDRESSES_SRC_ID VARCHAR(50) NOT NULL,
    POSTAL_CODE VARCHAR(50) NOT NULL,
    ADDRESS VARCHAR(100) NOT NULL,
    CITY_ID INT NOT NULL,
    SOURCE_SYSTEM VARCHAR(50) NOT NULL,
    SOURCE_ENTITY VARCHAR(50) NOT NULL,
    INSERT_DT TIMESTAMP NOT NULL,
    UPDATE_DT TIMESTAMP NOT NULL,
    PRIMARY KEY (ADDRESS_ID),
    FOREIGN KEY (CITY_ID) REFERENCES BL_3NF.CE_CITIES(CITY_ID)
);

ALTER SEQUENCE BL_3NF.SEQ_CE_ADDRESSES OWNED BY BL_3NF.CE_ADDRESSES.ADDRESS_ID;


-- Add default row
INSERT INTO BL_3NF.CE_ADDRESSES (
    ADDRESS_ID, ADDRESSES_SRC_ID, POSTAL_CODE, ADDRESS, CITY_ID, SOURCE_SYSTEM, SOURCE_ENTITY, INSERT_DT, UPDATE_DT
) 
SELECT -1, 'n.a.', 'n.a.', 'n.a.', -1, 'MANUAL', 'MANUAL', '1900-01-01'::DATE, '1900-01-01'::DATE
WHERE NOT EXISTS (SELECT 1 FROM BL_3NF.CE_ADDRESSES WHERE ADDRESS_ID = -1);




-- CE_PRODUCTS_SCD Entity
CREATE SEQUENCE IF NOT EXISTS BL_3NF.SEQ_CE_PRODUCTS_SCD;

CREATE TABLE IF NOT EXISTS BL_3NF.CE_PRODUCTS_SCD (
    PROD_ID INT NOT NULL,
    PRODUCTS_SRC_ID VARCHAR(50) NOT NULL,
    PROD_CATEGORY_ID INT NOT NULL,
    PRICE_EACH DECIMAL(10, 2) NOT NULL,
    COST_EACH DECIMAL(10, 2) NOT NULL,
    SOURCE_SYSTEM VARCHAR(50) NOT NULL,
    SOURCE_ENTITY VARCHAR(50) NOT NULL,
    INSERT_DT TIMESTAMP NOT NULL,
    UPDATE_DT TIMESTAMP NOT NULL,
    IS_ACTIVE CHAR(1) NOT NULL,
    END_DT TIMESTAMP NOT NULL,
    PRIMARY KEY (PROD_ID)
);

ALTER SEQUENCE BL_3NF.SEQ_CE_PRODUCTS_SCD OWNED BY BL_3NF.CE_PRODUCTS_SCD.PROD_ID;

-- Add default row
INSERT INTO BL_3NF.CE_PRODUCTS_SCD (
    PROD_ID, PRODUCTS_SRC_ID, PROD_CATEGORY_ID, PRICE_EACH, COST_EACH, SOURCE_SYSTEM, SOURCE_ENTITY, INSERT_DT, UPDATE_DT, IS_ACTIVE, END_DT
) 
SELECT -1, 'n.a.', -1, 0, 0, 'MANUAL', 'MANUAL', '1900-01-01'::DATE, '1900-01-01'::DATE, 'Y', '9999-12-31'::DATE
WHERE NOT EXISTS (SELECT 1 FROM BL_3NF.CE_PRODUCTS_SCD WHERE PROD_ID = -1);





-- CE_PRODUCT_CATEGORIES Entity
CREATE SEQUENCE IF NOT EXISTS BL_3NF.SEQ_CE_PRODUCT_CATEGORIES;

CREATE TABLE IF NOT EXISTS BL_3NF.CE_PRODUCT_CATEGORIES (
    PROD_CATEGORY_ID INT NOT NULL,
    PRODUCT_CATEGORIES_SRC_ID VARCHAR(50),
    PROD_CATEGORY VARCHAR(50) NOT NULL,
    SOURCE_SYSTEM VARCHAR(50) NOT NULL,
    SOURCE_ENTITY VARCHAR(50) NOT NULL,
    INSERT_DT TIMESTAMP NOT NULL,
    UPDATE_DT TIMESTAMP NOT NULL,
    PRIMARY KEY (PROD_CATEGORY_ID)
);

ALTER SEQUENCE BL_3NF.SEQ_CE_PRODUCT_CATEGORIES OWNED BY BL_3NF.CE_PRODUCT_CATEGORIES.PROD_CATEGORY_ID;

-- Add default row
INSERT INTO BL_3NF.CE_PRODUCT_CATEGORIES (
    PROD_CATEGORY_ID, PRODUCT_CATEGORIES_SRC_ID, PROD_CATEGORY, SOURCE_SYSTEM, SOURCE_ENTITY, INSERT_DT, UPDATE_DT
) 
SELECT -1, 'n.a.', 'n.a.', 'MANUAL', 'MANUAL', '1900-01-01' :: DATE, '1900-01-01':: DATE
WHERE NOT EXISTS (SELECT 1 FROM BL_3NF.CE_PRODUCT_CATEGORIES WHERE PROD_CATEGORY_ID = -1);




-- CE_ORDERS Entity
CREATE SEQUENCE IF NOT EXISTS BL_3NF.SEQ_CE_ORDERS;

CREATE TABLE IF NOT EXISTS BL_3NF.CE_ORDERS (
    ORDER_ID INT NOT NULL,
    ORDERS_SRC_ID VARCHAR(20) NOT NULL,
    PROD_ID INT NOT NULL,
    QUANTITY INT NOT NULL,
    ORDER_DT DATE NOT NULL,
    ORDER_STATUS VARCHAR(20) NOT NULL,
    SOURCE_SYSTEM VARCHAR(50) NOT NULL,
    SOURCE_ENTITY VARCHAR(50) NOT NULL,
    INSERT_DT TIMESTAMP NOT NULL,
    UPDATE_DT TIMESTAMP NOT NULL,
    PRIMARY KEY (ORDER_ID)
);

ALTER SEQUENCE BL_3NF.SEQ_CE_ORDERS OWNED BY BL_3NF.CE_ORDERS.ORDER_ID;

-- Add default row
INSERT INTO BL_3NF.CE_ORDERS (
    ORDER_ID, ORDERS_SRC_ID, PROD_ID, QUANTITY, ORDER_DT, ORDER_STATUS, SOURCE_SYSTEM, SOURCE_ENTITY, INSERT_DT, UPDATE_DT
) 
SELECT -1, 'n.a.', -1, -1, '1900-01-01'::DATE, 'n.a.', 'MANUAL', 'MANUAL', '1900-01-01'::DATE, '1900-01-01'::DATE 
WHERE NOT EXISTS (SELECT 1 FROM BL_3NF.CE_ORDERS WHERE ORDER_ID = -1);





-- CE_DISCOUNTS Entity
CREATE SEQUENCE IF NOT EXISTS BL_3NF.SEQ_CE_DISCOUNTS;

CREATE TABLE IF NOT EXISTS BL_3NF.CE_DISCOUNTS (
    DISCOUNT_ID INT NOT NULL,
    DISCOUNTS_SRC_ID VARCHAR(20) NOT NULL,
    DISCOUNT_RATE INT NOT NULL,
    SOURCE_SYSTEM VARCHAR(50) NOT NULL,
    SOURCE_ENTITY VARCHAR(50) NOT NULL,
    INSERT_DT TIMESTAMP NOT NULL,
    UPDATE_DT TIMESTAMP NOT NULL,
    PRIMARY KEY (DISCOUNT_ID)
);

ALTER SEQUENCE BL_3NF.SEQ_CE_DISCOUNTS OWNED BY BL_3NF.CE_DISCOUNTS.DISCOUNT_ID;

-- Add default row
INSERT INTO BL_3NF.CE_DISCOUNTS (
    DISCOUNT_ID, DISCOUNTS_SRC_ID, DISCOUNT_RATE, SOURCE_SYSTEM, SOURCE_ENTITY, INSERT_DT, UPDATE_DT
) 
SELECT -1, 'n.a.', -1, 'n.a.', 'MANUAL', '1900-01-01'::DATE, '1900-01-01'::DATE
WHERE NOT EXISTS (SELECT 1 FROM BL_3NF.CE_DISCOUNTS WHERE DISCOUNT_ID = -1);




-- CE_CUSTOMERS Entity
CREATE SEQUENCE IF NOT EXISTS BL_3NF.SEQ_CE_CUSTOMERS;

CREATE TABLE IF NOT EXISTS BL_3NF.CE_CUSTOMERS (
    CUST_ID INT NOT NULL,
    CUSTOMERS_SRC_ID VARCHAR(50) NOT NULL,
    CUST_FIRST_NAME VARCHAR(50) NOT NULL,
    CUST_LAST_NAME VARCHAR(50) NOT NULL,
    CUST_COMPANY_NAME VARCHAR(50) NOT NULL,
    CUST_TYPE VARCHAR(20) NOT NULL,
    ADDRESS_ID INT NOT NULL,
    SOURCE_SYSTEM VARCHAR(50) NOT NULL,
    SOURCE_ENTITY VARCHAR(50) NOT NULL,
    INSERT_DT TIMESTAMP NOT NULL,
    UPDATE_DT TIMESTAMP NOT NULL,
    PRIMARY KEY (CUST_ID),
    FOREIGN KEY (ADDRESS_ID) REFERENCES BL_3NF.CE_ADDRESSES(ADDRESS_ID)
);

ALTER SEQUENCE BL_3NF.SEQ_CE_CUSTOMERS OWNED BY BL_3NF.CE_CUSTOMERS.CUST_ID;

-- Add default row for CE_CUSTOMERS
INSERT INTO BL_3NF.CE_CUSTOMERS (
    CUST_ID, CUSTOMERS_SRC_ID, CUST_FIRST_NAME, CUST_LAST_NAME, CUST_COMPANY_NAME, CUST_TYPE, ADDRESS_ID, SOURCE_SYSTEM, SOURCE_ENTITY, INSERT_DT, UPDATE_DT
) 
SELECT -1, 'n.a.', 'n.a.', 'n.a.', 'n.a.', 'n.a.', -1, 'MANUAL', 'MANUAL', '1900-01-01'::DATE, '1900-01-01'::DATE
WHERE NOT EXISTS (SELECT 1 FROM BL_3NF.CE_CUSTOMERS WHERE CUST_ID = -1);




-- CE_PAYMENTS Entity
CREATE SEQUENCE IF NOT EXISTS BL_3NF.SEQ_CE_PAYMENTS;

CREATE TABLE IF NOT EXISTS BL_3NF.CE_PAYMENTS (
    PAYMENT_ID INT NOT NULL,
    PAYMENTS_SRC_ID VARCHAR(20) NOT NULL,
    ORDER_ID INT NOT NULL,
    CUST_ID INT NOT NULL, 
    PAYMENT_TYPE VARCHAR(20) NOT NULL,
    DISCOUNT_ID INT NOT NULL,
    SOURCE_SYSTEM VARCHAR(50) NOT NULL,
    SOURCE_ENTITY VARCHAR(50) NOT NULL,
    INSERT_DT TIMESTAMP NOT NULL,
    UPDATE_DT TIMESTAMP NOT NULL,
    PRIMARY KEY (PAYMENT_ID),
    FOREIGN KEY (ORDER_ID) REFERENCES BL_3NF.CE_ORDERS(ORDER_ID),
    FOREIGN KEY (DISCOUNT_ID) REFERENCES BL_3NF.CE_DISCOUNTS(DISCOUNT_ID)
);

ALTER SEQUENCE BL_3NF.SEQ_CE_PAYMENTS OWNED BY BL_3NF.CE_PAYMENTS.PAYMENT_ID;

-- Add default row
INSERT INTO BL_3NF.CE_PAYMENTS (PAYMENT_ID, PAYMENTS_SRC_ID, ORDER_ID, CUST_ID, PAYMENT_TYPE, DISCOUNT_ID, SOURCE_SYSTEM, SOURCE_ENTITY, INSERT_DT, UPDATE_DT) 
SELECT -1, 'n.a', -1, -1, 'n.a', -1, 'MANUAL', 'MANUAL',  '1900-01-01'::DATE, '1900-01-01'::DATE
WHERE NOT EXISTS (SELECT 1 FROM BL_3NF.CE_PAYMENTS WHERE PAYMENT_ID = -1);


END;
$$;




-- If needed to drop and recreate the schema:
CALL bl_cl.BL_3NF_DDL_LOAD(TRUE);
